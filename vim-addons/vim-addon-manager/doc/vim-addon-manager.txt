*vim-addon-manager.txt* Declarative package manager for Vim
==============================================================================
CONTENTS                                                        *VAM-contents*

    0. GETTING STARTED & LOOKING FOR HELP <<

    1. Intro                                  |VAM-intro|
    2 Installation & installing plugins       |VAM-installation|
        2.2 names of addons and addon soucres |VAM-addon-names|
        2.3 Example: personal                 |VAM-complex-setup-sample|
            configurable setup
    3. Functionality provided                 |VAM-functionality|
        3.1. Commands                         |VAM-commands|
        3.2. Functions                        |VAM-functions|
    4. Options                                |VAM-options|
    6. Uninstalling plugins                   |VAM-uninstall-plugins|
    7. Addon-info file                        |VAM-addon-info|
    8. Author, credits, some notes            |VAM-related|
    9. Testing this plugin                    |VAM-testing|
   10. Some notes for windows users           |VAM-windows|
   11. Some notes for Gentoo users            |VAM-gentoo|
   12. Troubleshooting and known bug          |VAM-trouble-shooting|
       and TODOs as well as "I want .."
   13. VAM vs ...

   20. making plugins work with VAM
        (rtp different from ~/.vim)

==============================================================================

0. GETTING STARTED & LOOKING FOR HELP - something doesn't work

Getting started fast: ~
Read: |VAM-installation| and |VAM-addon-names|


NEED HELP: ~
Join irc.freenode.net, /join #vim. Ask there. VAM has many users
MarcWeber is hanging around often so ping him or create a github ticket [1] and
people will try to help you. You should skim the docs before asking for
help though. Also see |VAM-author|
[1] https://github.com/MarcWeber/vim-addon-manager/issues

==============================================================================
1. Intro                                                           *VAM-intro*

VAM is a shortcut for vim-addon-manager.
Difference addon/plugin: None.
>
 :h plugin
tells you about the old manual manual way of installing plugins. VAM helps 
keeping ~/.vim clean by separating plugins from each other.

Features:

    - Separate directories for each plugins
    - Dependency resolution
    - Popular VCS support: plugin supports fetching from Git, Mercurial,
      Subversion and Bazaar repositories

Dependencies:
    - Curl, wget or other program that can output URL contents to stdout (in
      order to get http protocol support)
    - Git, Mercurial, Subversion and Bazaar (if you want to install plugins
      from appropriate repositories)
    - vcs_checkouts plugin (comes with this addon)
    - Either tar, gzip and zip or 7-zip (required for unpacking some addons)
    - Vimball plugin (required for installing some addons) (in latest vim it
      is included by default)

What does "Declarative package manager" mean? The final behaviour of Vim
should be declared once. Your ~/.vimrc and |:UpdateAddons| should be enough
to cause same Vim behaviour everywhere.


==============================================================================
2. Installation                                             *VAM-installation*

Windows users: see |VAM-windows|.
Gentoo users: see |VAM-gentoo|.
linux/cygwin/OSX (anything support /bin/sh like shells) users:

recommended setup: make .vimrc checking out VAM:

Add the following to your .vimrc >

        fun SetupVAM()
          " YES, you can customize this vam_install_path path and everything still works!
          let vam_install_path = expand('$HOME') . '/.vim/vim-addons'
          exec 'set runtimepath+='.vam_install_path.'/vim-addon-manager'

          " * unix based os users may want to use this code checking out VAM
          " * windows users want to use http://mawercer.de/~marc/vam/index.php
          "   to fetch VAM, VAM-known-repositories and the listed plugins
          "   without having to install curl, unzip, git tool chain first
          " -> BUG [4] (git-less installation)
          if !filereadable(vam_install_path.'/vim-addon-manager/.git/config') && 1 == confirm("git clone VAM into ".vam_install_path."?","&Y\n&N")
            " I'm sorry having to add this reminder. Eventually it'll pay off.
            call confirm("Remind yourself that most plugins ship with documentation (README*, doc/*.txt). Its your first source of knowledge. If you can't find the info you're looking for in reasonable time ask maintainers to improve documentation")
            exec '!p='.shellescape(vam_install_path).'; mkdir -p "$p" && cd "$p" && git clone --depth 1 git://github.com/MarcWeber/vim-addon-manager.git'
            " VAM run helptags automatically if you install or update plugins
            exec 'helptags '.fnameescape(vam_install_path.'/vim-addon-manager/doc')
          endif

          " Example drop git sources unless git is in PATH. Same plugins can
          " be installed form www.vim.org. Lookup MergeSources to get more control
          " let g:vim_addon_manager['drop_git_sources'] = !executable('git')

          call vam#ActivateAddons([], {'auto_install' : 0})
          " sample: call vam#ActivateAddons(['pluginA','pluginB', ...], {'auto_install' : 0})
          " where 'pluginA' could be "git://" "github:YourName" or "snipmate-snippets" see vam#install#RewriteName()
          " also see section "5. Installing plugins" in VAM's documentation
          " which will tell you how to find the plugin names of a plugin
        endf
        call SetupVAM()
        " experimental: run after gui has been started (gvim) [3]
        " option1:  au VimEnter * call SetupVAM()
        " option2:  au GUIEnter * call SetupVAM()
        " See BUGS sections below [*]
        " Vim 7.0 users see BUGS section [3]


minimal setup ~
>
  set rtp+=PATH-TO-VAM
  call vam#ActivateAddons([], {'auto_install' : 0})


NOTES: ~

   Depending on the option you choose to run ActivateAddons Vim may not be
   able to show the questions correctly asking you to install a plugin.
   If that's the case (for whatever reason) I recommend installing the plugin
   using |:InstallAddon| or |:ActivateAddon| before adding it to the list in .vimrc

   If you're annoyed by the message: >
   "Press enter to continue"
<  There are at least two solutions you can try:

  - press q once and Vim should stop asking
  - set auto_install = 1 (to make Vim stop asking you any questions. However you
    won't know if knew dependencies are fetched in that case etc)

Continue reading |vim-addon-manager-install-plugins|.

------------------------------------------------------------------------------
2.2 names of addons and addon sources                        *VAM-addon-names*

Which addon-names can be passed to |vam#ActivateAddons()|, |:InstallAddons|,
|:ActivateAddons| ?

VAM installs addons by name. Thus there is a pool mapping names to plugin
sources. You can either manipulate the default pool
|VAM-kr| or use the quick and dirty hack
and pass git/hg/svn/bazaar/.. urls directly as names. Name syntax see
|vam#install#RewriteName()|.
If you want to depend on a plugin consider registering its name in |VAM-kr|.
See |VAM-kr-patching|


determining addon names ~
- by id: |:AddonsInfo| SCRIPT_ID, pick the "VAM name" value.
- use |:InstallAddons|'s name completion by typing some chars then pressing
  <c-d> then <tab>.

long description:
Open the vim-addon-manager-known-repositories/plugin/vim-addon-manager-known-repositories.vim (-> |VAM-kr|
There you'll find the two types of dictionaries which are used to find and
install plugins. You'll find lines like this:
>
  let s:plugin_sources['Align294'] = {'title': 'Align', 'version': '35/41', 'url': 'http://www.vim.org/scripts/download_script.php?src_id=10110', 'vim_version': '7.0', 'date': '2009-03-04', 'vim_script_nr': 294, 'type': 'archive', 'script-type': 'utility', 'archive_name': 'Align.vba.gz', 'author': 'Charles Campbell'}
  let s:plugin_sources['Align1497'] = {'title': 'Align.vim', 'version': '0.15', 'url': 'http://www.vim.org/scripts/download_script.php?src_id=5451', 'vim_version': '6.0', 'date': '2006-03-17', 'vim_script_nr': 1497, 'type': 'archive', 'script-type': 'utility', 'archive_name': 'Align.vim', 'author': 'Michael Gnezdov'}
<
In this example both titles are stripped to "Align" which would result in a
name collision. Thus the gather script appends the script ids.
The script id can be found in the plugin web url.

There is a second type of dict containing bleeding edge versions:
>
  let s:scm_plugin_sources['tmru'] = {'type': 'git', 'url': 'git://github.com/tomtom/tmru_vim.git' }
<
The keys (eg tmru, Align294, Align1497) must be used instead of {name}.
>
  :ActivateAddons Align<c-d>[<tab>]
< showes a list of all names containing "Align" which is often enough to
identify the plugin you're looking for.


*VAM-kr* : The default pool. Its checkout out by |vim-addon-manager| by
default. its long name is *vim-addon-manager-known-repositories* .

*VAM-kr-patching*
Both dicts are merged. The default is to prefer the scm version but you can
choose. (-> MergeSources). You can either overwrite the merge function or just
predefine the dictionary and add your own sources for testing before
submitting to |VAM-kr|:

You can add your own sources to the pool easily: >
  let g:vim_addon_manager = {}
  let g:vim_addon_manager.plugin_sources = {}
  let g:vim_addon_manager.plugin_sources['your_plugin_name'] = { plugin dictionary }
<

Or overwrite the MergeSources function: >

    fun MyMergeSources(plugin_sources, www_vim_org, scm_plugin_sources)
      " run default:
      call vam_known_repositories#MergeSources(a:plugin_sources, a:www_vim_org, a:scm_plugin_sources)

      " patch sources the way you like. This example adds username and password
      " for SVN repositories. As alternative you could overwrite git urls etc ..
      for your_plugin in ['svn-driven-key1', ...]
        let a:plugin_sources[your_plugin]['username'] = 'svn user'
        let a:plugin_sources[your_plugin]['password'] = 'svn user'
       endfor
    endf
    " tell VAM to use your MergeSources function:
    let g:vim_addon_manager = {}
    let g:vim_addon_manager['MergeSources'] = function('MyMergeSources')
<


------------------------------------------------------------------------------
2.3 Example: personal configurable setup *VAM-complex-setup-sample*
>
  call vam#ActivateAddons(["github:YOURNAME"],{'auto_install' : 0})
  " this initializes Vim the way *you* want also loading more plugins:
  call vim_addon_YOURNAME#Activate(['c-dev','ruby-dev'])
<
  My implementation looks like this:
  https://github.com/MarcWeber/vim-addon-MarcWeber/blob/master/autoload/vim_addon_MarcWeber.vim

  You can then load plugins depending on env vars:
  Example: >
  call vim_addon_YOURNAME#Activate(['always']+split($V,','))
< Then you can run vim like this from shell >
  V=c-dev,ruby-dev vim
<
  This section was written to inspire you only.

==============================================================================
3. Functionality provided                                  *VAM-functionality*

------------------------------------------------------------------------------
3.1. Commands                                                   *VAM-commands*

InstallAddons {name} ...                                      *:InstallAddons*
        Install addons with given names. See |vam#install#InstallAddons()| for
        more details.
        You use InstallAddons instead of ActivateAddons if you want to review
        plugin source before running it.

ActivateAddons {name} ...                                    *:ActivateAddons*
        Activate addons with given names. See |vam#ActivateAddons()| for
        more details.

ActivateInstalledAddons {name} ...                  *:ActivateInstalledAddons*
        See |:ActivateAddons|, this command is just the same, but completion
        function completes only installed addon names.

UpdateAddons [{name} ...]                                      *:UpdateAddons*
        Update addons with given names. Without arguments updates all addons.
        See |vam#install#Update()| for more details.

UninstallNotLoadedAddons {name} ...                *:UninstallNotLoadedAddons*
        Unistall addons with given names. See
        |vam#install#UninstallAddons()| for more details.

AddonInfo {id/name}  *:AddonInfo*
        show addon info and addon name

------------------------------------------------------------------------------
3.2. Functions                                                 *VAM-functions*

vam#ActivateAddons({addons}[, {opts}])                  *vam#ActivateAddons()*
        Installs and activates plugins listed in {addons} (see description of
        |vam#install#Install()|) list alongside with their dependencies. This
        is meant to be called from your .vimrc. Installation takes place only
        if plugin directory does not exist. Activation means adding plugin
        directory to 'runtimepath'. If vim has already started VAM will also
        source plugin/**/*.vim (in other case sourcing is done by vim).

        Optional {opts} argument should be a dictionary with key 
        "auto_install". It will be used to override global option 
        |VAM-auto_install|. Other possible keys are for internal use only. In 
        order to manually activate plugins try using |:ActivateAddons| which 
        also provides completion.

        In order to manually activate plugins try using |:ActivateAddons|
        which also provides completion.

        Implementation details: ~
        Vim's startup behaviour is:
            1. source ~/.vimrc
            2. find all plugin/*.vim files in &rtp
            3. source them
            4. emit the VimEnter au command


        Now it does not do its job 2. properly: some after/* files are not
        sources. If you add paths rtp at runtime plugin/* files aren't sourced
        either. VAM takes care of this for you - but changing source order may
        fail in rare cases.

vam#install#Install({addons}[, {opts}])                *vam#install#Install()*
        Installs plugins listed in {addons} list. Each list item must be one
        of the following:
            - Name of the plugin
            - Path to |addon-info.txt| file (it must contain at least one
              forward or back slash, so use `./plugname-addon-info.txt' for
              files located in the current directory)i
            - |addon-info.txt| URL. In this case {arg} must start with
              `http://'.
        After installing the plugin help tags are updated, see |:helptags|.

        {addons}: See |VAM-addon-names|

        {opts} argument is described in |vam#ActivateAddons()|.

vam#install#Update({addons})                            *vam#install#Update()*
        Updates plugins which names are listed in {addons}. If an empty list
        is given, then updates all plugins. vam#install#Update also updates
        the help tags. Note that if plugin is not under control of some VCS,
        it tries to retain user changes unless |VAM-do_diff| is disabled.

vam#AddonInfo({name})                                        *vam#AddonInfo()*
        Returns dictionary that contains information given in |addon-info.txt|
        file that comes with requested addon. If no |addon-info.txt| file is
        present, it is not readable or addon with given name is not installed,
        then it returns an empty dictionary.

                                              *vam#install#MergePluginFiles()*
vam#install#MergePluginFiles([{name}] [, blacklist-regex ])
        Highly experimental function that may speed up vim start on heavy IO
        load. This function renames all `plugin' directories to
        contents into `~/.vim/after/plugin/vim-addon-manager-merged.vim' which
        should cause less IO stress to your system, thus Vim will startup
        faster. This can scripts because:
            - s:... script global variables are renamed automatically to
              prevent name clashes
            - Guards are replaced by if ... endif which might be inefficient
            - `finish' statement that start line and every line after them are
              just commented out

        Using the blacklist-regex you can filter plugin/*.vim files and
        prevent them from being included. For example this excludes many tlib
        plugins.: >

            let s:merge = [ "tlib" ]
            call vam#ActivateAddons(s:merge)
            command MergePluginFiles call vam#install#MergePluginFiles(s:merge+["tlib"], '\%(cmdlinehelp\|concordance\|evalselection\|glark\|hookcursormoved\|linglang\|livetimestamp\|localvariables\|loremipsum\|my_tinymode\|pim\|quickfixsigns\|scalefont\|setsyntax\|shymenu\|spec\|tassert\|tbak\|tbibtools\|tcalc\|tcomment\|techopair\|tgpg\|tmarks\|tmboxbrowser\|tortoisesvn\|tregisters\|tselectbuffer\|tselectfile\|tsession\|tskeleton\|tstatus\|viki\|vikitasks\)\.vim_merged')
            command UnmergePluginFiles call vam#install#UnmergePluginFiles()
<

        Yes, the info files should be cached as well (TODO)

vam#install#RewriteName({name})                    *vam#install#RewriteName()*
    Returns a dictionary if {name} matches one of the following patterns:
    Pattern            Dictionary ~
    github:{Name}      {"type": "git",
                        "url": "git://github.com/{Name}/vim-addon-{Name}}
    github:{N}/{Repo}  {"type": "git",
                        "url": "git://github.com/{N}/{Repo}"}
    git:{URL}          {"type": "git", "url": {URL}} (experimental)

==============================================================================
4. Options                                                       *VAM-options*
                                                         *g:vim_addon_manager*

All options are located in the global dictionary g:vim_addon_manager. It also
contains some stuff that user should never modify if he wants to see this
plugin working. Possible keys:

auto_install                                                *VAM-auto_install*
        This options disables plugin installation confirmation. It will not
        disable deprecation warnings and other prompts.
plugin_sources                                            *VAM-plugin_sources*
        This option contains a dictionary where keys are plugin names and
        values are described by |addon-info-repository|. Values defined in
        this dictionary override corresponding values in |addon-info.txt|
        files, so be careful when you extend it.
plugin_root_dir                                          *VAM-plugin_root_dir*
        Defines a directory where plugins will be installed to. If directory
        where this plugin is installed to (three levels up relative to
        autoload/vam.vim: autoload/../..) is writeable by user, then
        it defaults to directory in question (so, if user has installed
        vim-addon-manager to ~/.vim/bundle/vim-addon-manager, this will be
        equal to ~/.vim/bundle). If autoload/vam.vim is not
        writeable by the user, then it defaults to ~/.vim/vim-addons.
        Note that you must set this variable before calling any vam function
        Note 2: it may be ignored in custom |VAM-plugin_dir_by_name|.
                                           *VAM-known_repos_activation_policy*
known_repos_activation_policy
        String, valid values: `ask', `never' and `autoload' (default). Defines 
        when |VAM-known| plugin should be loaded. `Ask' means that user will 
        be prompted when this option is required. `Never' means that 
        |VAM-known| will not be loaded and the user will not get any prompts. 
        `Autoload' means that it will be loaded when it is required, user also 
        won't get asked.
        known                                                      *VAM-known*
        String, specifies the name of plugin which provides list of
        repositories. Default is VAM-known-repositories.
change_to_unix_ff                                      *VAM-change_to_unix_ff*
        Remove CR symbols before LF symbols in any vim files (changes dos and
        mixed dos/unix line endings to unix line endings). Is on by default if
        you are on unix (unix, win32unix, macunix), off otherwise.
do_diff                                                          *VAM-do_diff*
        If this option is true (default), then try to retain user changes to
        installed plugins (unless they are under SCM control). Requires diff
        and patch programs installed.
name_rewriting                                            *VAM-name_rewriting*
        Set this to a dictionary with functions each taking a plugin name and
        returning either a dictionary with repository location (see
        |addon-info-repository|) for given name or zero. Location will be set
        to the first non-zero value, functions are executed in order
        determined by |sort()|ing |keys()| of the dictionary. These functions
        will be called when repository location for requested plugin is not
        found.
        Value will be extended with >
            {"99git+github": "vam#install#RewriteName"}
<       after it is read (see |vam#install#RewriteName()|).
plugin_dir_by_name                                    *VAM-plugin_dir_by_name*
        Function name or function reference that transforms plugin names into
        absolute paths plugins are to be installed into. Function must return
        path without trailing path separators or |VAM-do_diff| will break.
        Default is "vam#DefaultPluginDirByName".
        Note: If not all plugins are contained in the same direcotry
              completion for |:UninstallAddons| breaks because simple globbing
              is used.

The following options are used by vim-addon-manager-known-repositories, not by
VAM itself. So if you set |vim-addon-manager-known| to another value they may
have no effect.
                                                        *VAM-drop_SCM_sources*
drop_git_sources                                        *VAM-drop_git_sources*
drop_hg_sources                                         *VAM-drop_hg_sources*
drop_svn_sources                                        *VAM-drop_svn_sources*
drop_bzr_sources                                        *VAM-drop_bzr_sources*
        Determines whether given SCM sources should be dropped before merging
        scm sources by |scm_merge_strategy|. This way you can force using
        www.vim.org sources. But you may get different plugin versions

scm_merge_strategy                                    *VAM-scm_merge_strategy*
        String, valid values: `force' (default), `keep' and `never'. Defines,
        whether SCM sources should be used instead of www.vim.org sources:
        `forces' stands for prefering SCM over www.vim.org, `keep' means that
        SCM sources will be used only if the plugin is not available from
        www.vim.org, `never' means that SCM sources will be never used.
MergeSources                                                *VAM-MergeSources*
        Function reference, defines a function that will be used to merge
        user, |VAM-kr| and SCM sources.
        Overrides |VAM-scm_merge_strategy| and |VAM-drop_SCM_sources|. Will be 
        called with three arguments: user sources (most of time it is an empty 
        dictionary), non-SCM sources defined in |VAM-kr| and SCM sources also 
        defined there. If MergeSources function is a dictionary function, it 
        will be provided an empty dictionary as |self| dictionary.

        An Example can be found in this file.

==============================================================================
6. Uninstalling Plugins                                *VAM-uninstall-plugins*

Follow these steps:

- Remove the plugin name from the call to |vam#ActivateAddons()| in your
  vimrc.

- Restart Vim and remove plugin directory using >
  :UninstallNotLoadedAddons {pluginname}
< or rm -fr those directories manually.

==============================================================================
7. Addon-info file                                            *VAM-addon-info*
                                            *addon-info.json* *addon-info.txt*

Each plugin that intends to use vim-addon-manager for distributing itself
needs to have addon-info.json [1] file in its root,
that contains the JSON dictionary with the following keys (none of the keys
are required):

[1]:  older alternative name: {plugname}-addon-info.txt

name                                                         *addon-info-name*
        Name of the plugin. Must not contain any characters that cannot be
        used in a directory name (including directory names separator).
        Note that if the value of this key, {plugname} part in addon-info.txt
        file name and directory under which plugin is installed are not equal,
        then user that tries to use your plugin may catch strange bugs.

repository                                             *addon-info-repository*
        Describes where the plugin should be fetched from. Ignored unless the
        plugin is installed using either the second or third form of
        |vam#install#Install()| call (see its description). This is
        a dictionary with the following keys:

         !! Note: As very common in extreme programming documentation may be
         !! outdated. So may be this section. So refer to the code:
         !! |vam#install#Checkout()| to find out about all supported keys
         !! Its easy to read and extend. Contact me if you're unsure. I'll help
         !! you.
         !! I'd even consider moving this section into the code only refering
         |! to it - so that its kept in sync.

        Key      Description ~
        type     Required, must be either one of `hg', `git', `svn', `bzr' or
                 an empty string.
        url      If `type' key contains a VCS name (`hg', `git', `bzr' or `svn'),
                 then this key describes a url that will be passed to this
                 VCS. If `type' key contains an empty string, then it should
                 contain location of the archive.
        script-type
                 One of `plugin', `syntax', or `indent'. The .vim file will be
                 moved into the specific subdirectory.
        archive_name
                 If `type' key contains an empty string, then archive which
                 location is described by the `url' key will be saved in file
                 with name {archive_name} and processed according to its
                 extension. Supported extensions (note that if you have 7-zip
                 installed no other archive tools are required):
                 Extension     How it is handled ~
                 .vim          This extension designates that plugin is
                               a single file. So, if exists key `script-type'
                               and it is equal to `syntax' or `indent', then
                               this file is put under {plugname}/syntax or
                               under {plugname}/indent, otherwise it is put
                               under directory described by
                               {plugname}/{target_dir} (where {target_dir} is
                               a value of `target_dir' key if it is present
                               and `plugin' otherwise).
                .tar.gz, .tgz  This extension designates that plugin is
                               contained inside tar archive compressed by
                               gzip. In this case, archive is uncompressed by
                               `gzip' and unpacked to its directory by `tar'
                               (both utilities may be replaced with `7z x').
                .tar.bz2, .tbz2
                               Like .tar.gz, but with bzip2 compression.
                .tar           This extension designates that plugin is
                               contained inside uncompressed tar archive. In
                               this case, archive is unpacked to its directory
                               by `tar'.
                .zip           This extension designates that plugin is
                               contained inside a zip archive. In this case
                               archive is unpacked to its directory by
                               `unzip' (may be replaced by `7z x').
                .7z, .rar, .cab, .arj, .jar
                               This extension designates that plugin is
                               contained inside an archive that is supported
                               by p7zip archiver. In this case archive is
                               unpacked to its directory by `7z x'.
                .vba           This extension designates that plugin is
                               contained in a vimball archive. In this case
                               vimball#Vimball() function is used, see
                               |:UseVimball| for more details.
                .vba.gz        This extension designates that plugin is
                               contained in a vimball archive compressed by
                               gzip. In this case archive is uncompressed and
                               vimball#Vimball() function is used, see
                               |:UseVimball| for more details.
                .vba.bz2       Like .vba.bz2, but with bzip2 compression.
        deprecated
                If this key is present and contains non-empty string, then
                every time when user tries to install this plugin he will see
                this message and will have to confirm installation.
        strip-components
                Strip first {strip-components} directories after unpacking an
                archive. If it is equal to special value `-1' (default), then
                it will strip either one directory (if archive contains the
                only directory that is not special) or will not strip anything
                at all. Recognized special directories: [ft]plugin, autoload,
                colors, compiler, indent, keymap, lang, print, spell, syntax.

dependencies                                         *addon-info-dependencies*
        Describes plugins that are required for the plugin, must contain
        a dictionary where keys are plugin names and values describe where
        appropriate plugins should be fetched from (overriden by 
        |VAM-plugin_sources|). The format of the values is the same as 
        |addon-info-repository|.


version                                                   *addon-info-version*
author                                                     *addon-info-author*
maintainer                                             *addon-info-maintainer*
description                                           *addon-info-description*
homepage                                                 *addon-info-homepage*
        Version, author, maintainer, description and plugin homepage. Ignored,
        but setting them to the real values will not do any harm.

==============================================================================
8. Author, credits, some notes                                   *VAM-related*

Related work: ~

PATHOGEN:
    Until now I thought it was only about manipulating runtimepath.
    But the most recent announcement about mirroring all vim scripts
    shows that it may become a competitive VAM alternative?
    http://www.vim.org/scripts/script.php?script_id=2332
    http://vim-scripts.org/index.html

There are also some other package managers for vim:
    http://github.com/c9s/Vimana
    http://snk.tuxfamily.org/log/vim-script-management-system.html
    http://github.com/gmarik/vundle (git support only, VimL)
You can try and see which is the best.

another list: http://vim-scripts.org/tools.html

Emacs install scripts manager:
  el-get http://github.com/dimitri/el-get/blob/master/el-get.el

There is another project which has the same name:
http://packages.debian.org/sid/vim-addon-manager
The author (Jamessan) is fine with this project sharing the same name.

------------------------------------------------------------------------------
7.1. Author contacts                                              *VAM-author*

Github account: MarcWeber
Email: marco-oweber@gmx.de

------------------------------------------------------------------------------
7.2. Contributors                                           *VAM-contributors*

(Incomplete list):
Tim Pope (+)  (tpope on github)
  - Json validation
ZyX (+) (Nikolay Pavlov, ZyX-I on github)
  - enhancing this vim documentation
  - various fixes
  - discussing implementation details
  - initial implementation for updating plugins which were installed by
    archive
  - pushing 7z and providing a reference implementation
  - smart strip components implementation
Tux Tom (+) (http://github.com/TuxTom)
  - helping fixing a cd bug on Windows
creidiki (Leonardo Valeri Manera)
  - greatly improving Windows support
  - working around the tar issues on Windows
..
Mike Smullin:
 - for asking to find a way to source addons when gui is running.
   There is a hint now. This is important if you don't start vim from console

Israel Chauca Fuentes:
 - reporting and fixing some bugs

(+) means they are collaborators on github and could take action in case of serious
    trouble.

------------------------------------------------------------------------------
ROADMAP:

What features are missing?

- When updating archive based plugins create diffs so that you can patch
  those files without changes being lost. I expect users to customize mappings
  and such

- add a command like AddonManagerFetchUtils which does all the work listed in
  9. for you putting the tar etc into a directory and adding it to PATH

- suggestions?


==============================================================================
9. Testing this plugin                                           *VAM-testing*

Run >
    # Replace ~/.vim/vim-addons/vim-addon-manager with the path you installed this
    # plugin to
    cd ~/.vim/vim-addons/vim-addon-manager
    sh vim-addon-manager-test.sh
.
You should see >
    1
    1
    1
at the end. Written for Linux only. Code coverage is bad. Its a starting
point.

==============================================================================
10. Some notes for windows users                                 *VAM-windows*

Finally the nightmare came to an end:
http://mawercer.de/~marc/vam/index.php
Enter plugins names, download final .zip. Be happy and enjoy VAM.
We could create a vim-addon-curl-unzip-for-windowns plugin providing those
executables. Then VAM would be able to install many plugins after
bootstrapping without help of the vam/index.php url. Tell me to work on it.
Also see BUG [4]

OLD docs:

Win32 tools for vim-addon-manager

Fast: put curl into ~/.vim/vim-addons/binary-utils/dist then call this function
to setup the remaining tools (tar, bzip, gzip, unzip)
>
    call vam#install#FetchAdditionalWindowsTools()
<
If 7z is in PATH bzip, unzip, gzip are not pulled. So consider installing that
and add it to PATH by
>
    let $PATH=$PATH.';'.PATH_TO_7z
<
( TODO: test it, provide a way to install 7z instead? )

After the tools are setup, sometimes installing an addon still fail.
Usually this is triggered by a weird value of |shellslash| or |shellquote|.
Here is that was found to be working:
>
    set shellslash=0
    set shellquote=\"
<

See http://stackoverflow.com/questions/355988/how-do-i-deal-with-quote-characters-when-using-cmd-exe
for more informations.

Ashwin Nanjappa provided an alternative installation instruction here which
worked for him. You may still want to read this section first. There are
multiple ways to make VIM run on Windows and install all missing dependencies.
http://choorucode.wordpress.com/2010/12/09/using-vim-addon-manager-on-windows/

Does it make sense to support svn and git this way as well?
Is it even possible?
At least we can fetch and execute the installers..

Section provided by creidiki:

Curl:
    Get Curl here: http://curl.haxx.se/download.html

    1. Scroll down to the end of the "Packages" list. You want (ideally) the
       latest version, of type `binary' (not libcurl or devel). SSL is not
       necessary but won't hurt. If your OS is 64-bit, you can get the Win64
       version if you want, but it won't be any faster.
    2. Install it. Then point vim-addon-manager (and, incidentally, netrw) to
       it by putting something like this in your _vimrc: >
           let g:netrw_http_cmd='{path_to_curl}\curl.exe -o'
<      (replace {path-to-curl} with the installation directory, including the
       brackets).

    Don't forget the -o argument at the end. :)

Archives:
    Get Tar, Gzip and Unzip from the GnuWin32 project
    Gzip: http://gnuwin32.sourceforge.net/packages/gzip.htm
    Tar: http://gnuwin32.sourceforge.net/packages/gtar.htm
    Unzip: http://gnuwin32.sourceforge.net/packages/unzip.htm

    Either get the complete package setups, or the binary installers. All you
    need is the binaries.
    Install or unpack them somewhere.

    Get xzdec here: http://nullprogram.com/blog/2010/04/16/
    or here: http://www.stats.ox.ac.uk/pub/Rtools/goodies/xzutils.zip
    You only need xzdec.exe. Put in the same place you put those other archive
    tools.

    Get p7zip here: http://7-zip.org/download.html. You need the full version
    with gui because package with command-line version contains only 7za
    executable, while you need 7z in order to support more archives.

    Either add them to your system or user path (google it!) or add them just
    to vim's path by putting something like this in _vimrc: >
        let $PATH='{path-to-gnu-utils};'.$PATH
<   Again, replace the whole of {path-to-gnu-utils} including brackets with
    the directory you have installed/unpacked them to.

VCS:
    MSysGit (and TortoiseGit/GitExtensions) by default add the `git'
    executable to your PATH. If you chose not to for whatever reason, you can
    use the trick above to let vim see them. TortoiseHG does the same with the
    mercurial `hg' executable. TortoiseSVN does not include the commandline
    `svn' executable, so if you need it install SilkSVN

    SilkSVN: http://www.sliksvn.com/en/download/
    MsysGit: http://code.google.com/p/msysgit/
    Mercurial: http://mercurial.selenic.com/


We tried thinking about making using vim-addon-manager easier for Windows
users. One idea was introducing a proxy which asks a linux server to package
git/svn/mercurial/bazaar as zip file on the fly. This would mean you don't
have to install svn,hg,.. to use plugins only.

If you want something like this to happen contact me.

==============================================================================
11. Some notes for Gentoo users                                   *VAM-gentoo*

Gentoo users may consider installing this plugin from pluginloader overlay
which is accessible via mercurial, url:
http://vimpluginloader.hg.sourceforge.net:8000/hgroot/vimpluginloader/pluginloader-overlay

In order to use this overlay paludis users can add the pluginloader.conf file
to /etc/paludis/repositories/ with the following contents: >
    location = /var/paludis/repositories/pluginloader
    format = e
    sync = hg+http://vimpluginloader.hg.sourceforge.net:8000/hgroot/vimpluginloader/pluginloader-overlay

    master_repository = gentoo
    names_cache = ${location}/.cache/names
    write_cache = /var/cache/paludis/metadata

Then you should unmask app-vim/vim-addon-manager and run >
    paludis --sync && paludis --install vim-addon-manager
or >
    cave sync && cave resolve -x vim-addon-manager
and everything will probably be fine.

For portage+layman users:
1. Create a file /var/lib/layman/pluginloader-overlay.xml with the following
   contents: >
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE repositories SYSTEM "/dtd/repositories.dtd">
        <repositories xmlns="" version="1.0">
          <repo quality="experimental" status="unofficial">
            <name>pluginloader-overlay</name>
            <description>Overlay that contains some additional vim plugins</description>
            <source type="mercurial">http://vimpluginloader.hg.sourceforge.net:8000/hgroot/vimpluginloader/pluginloader-overlay</source>
          </repo>
        </repositories>
2. Add the following line to /etc/layman/layman.cfg just after the line that
   starts with `overlays' (do not forget to indent it, see comment above the
   target line): >
                file:///var/lib/layman/pluginloader-overlay.xml
3. Run >
        layman -ka pluginloader-overlay
4. Unmask vim-addon-manager and run >
        emerge vim-addon-manager


==============================================================================
*marc-weber-VAM-design-notes*

Until now I tried following the "New Jersey", KISS, MIT principles:
- Try to achieve 80% of value by spending 20% of effort
- I consider this piece of code being perfect if there is nothing you can
  remove.
- If it behaves ok in 95% of all use cases its good enough (for me)
  because I prefer a minimal code base.

ZyX created a branch which tries to be accurate summarrized by quoting him:
"I am trying to get rid of as much future errors as possible".
See related work to get it instead of this. Lets watch it and be curious about
what's going to happen.

==============================================================================
12. Troubleshooting and known bugs                      *VAM-trouble-shooting*

  runtimepath manipulation should be separated from installation / update
  logic. This way you can have different implementation for updating plugins
  eg one being written in python which you can run from commandline.
  However to keep it portable this means we had to support
  - a VimL solution (eg for Windows users ?)
  - a python/ruby/perl/whatsoever commandline version
  (See thread "which plugin management system to use?" on vim_use)

  ERROR: Vim(call):E117: Unknown function: vam#Activate

  SOLUTION: set runtimepath (rtp) correctly. It must match the directory you
            installed VAM into.

  ANY OTHER ERROR:
  Try commenting all your code in .vimrc and other plugins - does it work
  then? Settings which are known to cause trouble:

    :echo &shell
    :echo &shellslash (some windows users seem to set this differently?)

  older vim's eg 7.0...
  jolan78 has fixed one issue with older vims. There are likely to be more:
  https://github.com/MarcWeber/vim-addon-manager/issues/51#issuecomment-2112747

[*]: Comment about calling ActivateAddons() using autocommands:

  Obviously GUIEnter is only an option if you use gvim only.

  Some plugins may fail to assign their changes to existing buffers
  this way. That's one of the reasons why calling ActivateAddons()
  using an autocommand is marked as experimental.
  Probably those are I "won't fix" bugs. Eventually consider patching
  those plugins instead.

  Workaround: Try adding this to to ActivateAddons() function which should
  catch almost all issues by reassigning the filetype to each buffer: >
  bufdo exec 'set ft='.&ft
< (or use the tlib#buffer#BufDo() function from tlib which will try to
  preserve the current buffer ... or ... - This may have undesired
  side effects: Try "vim small-file 2gb-file.txt" and vim will startup fast
  because the 2gb file will be loaded only if you switch to the buffer.
  Eg try :bn and you'll wait several minutes. Using bufdo will force loading
  the (all) buffers on command line immediately ..).
  You get the idea why I'm not going to maintain this. Putting it into your
  .vimrc should be easy enough.

[3]: VAM does not work nicely with older versions of Vim (won't fix)
  For vim-7.0 you can make it work easily by adding loading all .vim files
  always:

  1) replace shellescape( [...] ,1) by shellescape([...])

  2) add to SetupVAM (because function(..) does not behave correctly load
  all files always): >

  " slow performance. This could be optimized some more - I do no longer
  " care about such old Vim versions. Think about upgrading.
  for f in split(glob(vam_install_path.'/vim-addon-manager*/**/*.vim'),"\n")
    if f =~ 'plugin/vim-addon-manager-known-repositories.vim' | continue | endif
    exec 'source '.fnameescape(f)
  endfor
<

[4]: VAM depends on git. Why does it?
  VAM-kr is checkout out by git which contains the default merge function.
  As advanced user you can define your own sources and define your own merge
  function trivially - that somehow defeats the idea of having one working
  maitained pool of sources though.
  It can be fixed: Eg github allows downloading zip files. However then you
  still have to
  (1) download sources (curl, wget, python support + urllib, ...)
      which is not the default for windows.
  (2) implement a way to determine when updates should take place eg when a
      repo is outdated. Again probably there are ways to query github even
      though I know about web scraping only .. But isn't installing git or
      using the web interface for Windows users much nicer?

  Tell the VAM team if you want git-less installations to be easier and
  supported, please. Right now we're lazy.

  For windows users there is: http://mawercer.de/~marc/vam/index.php
  which will also work on sytems not having git but an unzip implementation.

TODOs:
- support vim-scripts.org. This will let you get all www.vim.org scripts using
  git repositories only. I think the general idea is great. However we have to
  take care to keep patches which were written for git/hg in sync.

  If you want this feature tell me. I'll add the sources to |VAM-kr| then.

- full update must be done by
  :UpdateAddons -known<tab>
  restart
  :UpdateAddons

  Running :UpdateAddons once should be enough

  The fix is to force users to use MergeFunction when patching
  and moving the sources into autoload functions you can reload.
  Then you can rerun the MergeFunc to get up to date pool in Vim memory.

Sometimes it happens that some small bugs appear. Most of the time they are
easy to identify and trivial fix. Usually fixes happen very fast (within less
than 2 days)
If you don't want to wait try running >
  git checkout HEAD^
< in the vim-addon-manager directory up to 10 times to checkout older
revisions and retry.

tianyicui : Actually I think the name [vim-addon-manager] is too long
(github)    and totally uncool.
Marc Weber: Your suggestion VAM as abbreviation is fine. Let's use that.
            Switching the name means a lot of work and many dead links.
            I'm not going to switch the name for 'uncoolness' reasons soon.

Don't have those commands? See |VAM-installation|.
Windows installation is more tedious than on Linux - yes.

Still trouble? Get in touch, see |VAM-author|

The help file should be using VAM. (Yes - but its too much work to get it
right for now)

You have to trust script authors:
Because everybody can upload everything to the repositories (in particular
www.vim.org) you must trust authors. I can't review all code - so expect code
to steal your passwords, run sudo rm -fr / ... etc. (This never happened to
me. But it could)
Briefly: I'm not responsible for the code you get using vim-addon-manager.
You can use |InstallAddons| to preview source.

If something goes wrong - and if I don't reply within 24h:
The following github users are collaborators. This means they have write
access to the official repository:
tpope, dertuxmalwieder, TuxTom.

If a plugin behaves strangely then try
http://github.com/dahu/VimLint/blob/master/plugin/vimlint.vim.
Maybe you have an uncommon Vim setting causing some plugins to fail.

There is currently no way forcing loading a plugin at .vimrc time.
Vim delays executing plugin/*.vim files until .vimrc finished processing.
This leads to some hacks such as defining g:in_load_known_repositories.
Forcing loading a plugin earlier (including dependencies !) would allow us to
get rid of this hack.

Its a bug that VAM supports ',' in path items of runtimepath.
Most other plugins do not. IMHO the true fix would be fixing Vim:
call add(g:runtimepath, "newpath") and all the trouble would be gone.
But vim does not use g:runtimpath, it uses an option with strange quoting.
Same applies to errorformat.
So don't use ',' in paths and everyone is happy.

I only act uppon feedback. So if you want changes you have to contact me.
Don't expect me to know what you dream about.

"I want feature X" such as browsable lists of plugins. ActivateAddons FOO
make launching the plugin permanent, ...
Me too - pay me.
Seriously: I don't want to add all features to VAM. It is designed as minimal
as possible. This excludes any gui features. If you want to add such browser
or the like create a new plugin "vim-addon-manager-gui" people can install and
use. I'm happy to put a link into this manual or assist you. However
I personally don't have time to write it.

VAM only checks out 2 revisions using git.
Its not a bug. You can get remaining versions by git fetch --depth=9999999
or such. This speeds up installation very much and should be still be
sufficient to prepare patches.


==============================================================================
13. VAM vs ...

vs Pathogen 
-------------

  1) helptags is run automatically always when updating or installing plugins
    only

  2) Because there is a maintained pool of plugins you can patch or
    deprecate them:
    This happened to Sanders snipmate.
    Most patches just add "root" key telling VAM to add a subdir to rtp.

  3) simple dependency management

  4) supports all common VCS (svn, bazaar, git, mercurial)

  5) Automatic downloading of scripts from vim.org.

  6) It works around some incomplete implementations of rtp in Vim.
    Eg Vim does not load after and ftdetect files of rtp paths.

    update: https://github.com/tpope/vim-pathogen/issues/29
    indicates that Pathogen will cope with ftdetect in the future

  7) You can easily load plugins at runtime.

vs vundle
---------

    Vundle seems to source after/* files for you (since March 2011)

    BUT: It doesn't take care about ordering when adding to rtp.
    Thus ~/.vim/after/ftplugin/* is sourced before
    ~/.vim/bundle/PLUGIN/ftplugin but should be the other way round.

    However its unlikely that you run into this issue (I know about one case).


vs X
---------
  TODO: Most people are using VAM or Pathogen now AFAIK - so if you feel need
  for this list submit patches

I personally don't have anything against the other solutions. I like to point
out the importance of the "dependency" feature. It allows reusing code easily.
Thus code will be reused easily. Thus code review will take place yielding
more collaboration thus better code. That was the main reason why I started
VAM. And that's good for community.

==============================================================================
20. making plugins work with VAM (rtp different from ~/.vim)

Most plugins should work out of the box.

Some older plugins expect to be installed into ~/.vim. Probably they can be
patched easily by replacing ~/.vim by a path relative to the file running the
code: >

  " this is ~/.vim/vim-addons/foo/autoload/x.vim
  " does not work inside a function!
  let s:plugin_base_dir = expand('<sfile>:p:h:h')
  " now s:plugin_base_dir contains ~/.vim/vim-addons/foo
<
Then plugins can find additional resources (templates, python files, ..)
relative to s:parent_dir_of_this_file

==============================================================================
The linux script is gone. Search for "unix based os" to learn about its
replacment.

See :h 'modeline' to learn about the following line setting up defaults.
Usually you'd prefer ftplugin files (do it once).
vim: tw=78:ts=8:ft=help:norl
